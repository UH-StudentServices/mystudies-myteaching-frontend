// Check for required properties
['base_url', 'username', 'password'].collect { "opintoni_artifactory_$it" }.each {
    if (!project.hasProperty(it)) {
        def msg = """
      |Missing project property: $it
      |
      |Configure Artifactory connection in file: \$USER_HOME/.gradle/gradle.properties
      |
      |opintoni_artifactory_base_url=<base url>
      |opintoni_artifactory_username=<username>
      |opintoni_artifactory_password=<password>
      |
      |Or provide with command line args like:
      |
      |-Popintoni_artifactory_base_url=<base url> -Popintoni_artifactory_username=<username> -Popintoni_artifactory_password=<password>
    """.stripMargin()
        throw new GradleException(msg)
    }
}

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath "net.researchgate:gradle-release:2.0.0"
        classpath "com.moowork.gradle:gradle-grunt-plugin:0.10"
    }
}

apply plugin: 'com.moowork.grunt'
apply plugin: 'distribution'

distributions {
    main {
        contents {
            from { 'dist/' }
        }
    }
}

apply plugin: 'net.researchgate.release'
group 'fi.helsinki.opintoni'
version version

repositories {
    maven {
        credentials {
            username opintoni_artifactory_username
            password opintoni_artifactory_password
        }
        url "${opintoni_artifactory_base_url}/repo"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

apply plugin: "maven-publish"

publishing {

    //
    // What is published, i.e. build artifacts and their names.
    //
    publications {
        maven(MavenPublication) {
            groupId group
            artifactId 'opintoni-app-frontend'
            artifact distTar
        }
    }
    //
    // Where to publish, i.e. repository connection information.
    //
    repositories {
        maven {
            credentials {
                username opintoni_artifactory_username
                password opintoni_artifactory_password
            }

            if (version.endsWith('SNAPSHOT')) {
                url "${opintoni_artifactory_base_url}/libs-snapshot-local"
            } else {
                url "${opintoni_artifactory_base_url}/libs-release-local"
            }
        }
    }
}

def env = project.getProperty('environment')

task storeDeployInformationToFile << {
    def props = new Properties()
    file("gradle.properties").withInputStream { stream -> props.load(stream) }

    def deployProps = [VERSION: props["version"], ENVIRONMENT: env]
    def content = deployProps.collect { key, value -> "$key=$value" }.join('\n')
    file("ci-deploy.properties").write(content)
}

createReleaseTag.dependsOn storeDeployInformationToFile

grunt_build.dependsOn 'installGrunt'
grunt_buildMinified.dependsOn 'installGrunt'
if(env == "prod" || env == "qa") {
    distTar.dependsOn grunt_buildMinified
} else {
    distTar.dependsOn grunt_build
}

